service account：
    k8s为pod内部的进程访问apiserver创建的一种用户
    pod外部也可以通过sa（serviceAccount）的token和证书访问apiserver，不过在pod外部一般都是采用client证书的方式

    创建一个namespace，就会自动生成名字为 default 的 service account
        （因为访问资源是要加上 namespace的，所以每个namespace下默认会生成一个）

    有sa后，就可以使用sa的token和apiserver交互。

    由于所有通信通过TLS进行，所以需要证书（ca.crt）或者不安全的连接 -insecure

自己创建额外的sa
    kubectl create sa sa1 -n sa-test

token和证书的获取
    每个sa都会自动关联一个secret，token和证书就存在secret中

    在pod内部：
        他们被放在如下文件中(所有pod内部的ca.crt证书都一样，都是和宿主机上/etc/kubernetes/pki/ca.crt)
        /var/run/secrets/kubernetes.io/serviceaccount/token
        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt


    pod外部：
        可以通过secret获取
        外部访问apiserver
        # 获取sa的token，cert和apiserver endpoint


SERVICE_ACCOUNT=sa1

# Get the ServiceAccount's token Secret's name
SECRET=$(kubectl get serviceaccount -n test ${SERVICE_ACCOUNT} -o json | jq -Mr '.secrets[].name | select(contains("token"))')

# Extract the Bearer token from the Secret and decode
TOKEN=$(kubectl get secret -n test ${SECRET} -o json | jq -Mr '.data.token' | base64 -d)

# Extract, decode and write the ca.crt to a temporary location
kubectl get secret -n test ${SECRET} -o json | jq -Mr '.data["ca.crt"]' | base64 -d > /tmp/ca.crt

# Get the API Server location
APISERVER=$(kubectl config view --minify | grep server | cut -f 2- -d ":" | tr -d " ")



root@master:~# curl --header "Authorization: Bearer $TOKEN" --insecure -s $APISERVER/api
{
  "kind": "APIVersions",
  "versions": [
    "v1"
  ],
  "serverAddressByClientCIDRs": [
    {
      "clientCIDR": "0.0.0.0/0",
      "serverAddress": "192.168.122.20:6443"
    }
  ]
}

--cacert /tmp/ca.crt 指定证书

root@master:~# curl --header "Authorization: Bearer $TOKEN" --cacert /tmp/ca.crt -s $APISERVER/api/
{
  "kind": "APIVersions",
  "versions": [
    "v1"
  ],
  "serverAddressByClientCIDRs": [
    {
      "clientCIDR": "0.0.0.0/0",
      "serverAddress": "192.168.122.20:6443"
    }
  ]
}root@master:~#
```

pod内部访问apiserver：

在pod外部使用的endpoint是192.168.122.20:6443.

KUBERNETES_SERVICE_HOST

KUBERNETES_PORT_443_TCP_PORT

```jsx
[root@K8S ~]# kubectl exec -it -n sa-test test sh
/ #
/ # env
KUBERNETES_PORT=tcp://10.96.0.1:443
KUBERNETES_SERVICE_PORT=443
HOSTNAME=test
SHLVL=1
HOME=/root
TERM=xterm
KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
KUBERNETES_PORT_443_TCP_PORT=443
KUBERNETES_PORT_443_TCP_PROTO=tcp
KUBERNETES_SERVICE_PORT_HTTPS=443
KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443
KUBERNETES_SERVICE_HOST=10.96.0.1
PWD=/
```

```jsx
root@master:~# kubectl exec -it -n sa-test test sh
获取token和证书
/ # TOKEN=`cat /var/run/secrets/kubernetes.io/serviceaccount/token`
/ # APISERVER="https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT"
不使用证书访问
/ # curl --header "Authorization: Bearer $TOKEN" --insecure -s $APISERVER/api
{
  "kind": "APIVersions",
  "versions": [
    "v1"
  ],
  "serverAddressByClientCIDRs": [
    {
      "clientCIDR": "0.0.0.0/0",
      "serverAddress": "192.168.122.20:6443"
    }
  ]
}/ #
使用证书访问
/ # CAPATH="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
/ # curl --header "Authorization: Bearer $TOKEN" --cacert $CAPATH -s $APISERVER/api
{
  "kind": "APIVersions",
  "versions": [
    "v1"
  ],
  "serverAddressByClientCIDRs": [
    {
      "clientCIDR": "0.0.0.0/0",
      "serverAddress": "192.168.122.20:6443"
    }
  ]
}
```

sa的默认权利

```jsx
当curl请求通过apiserver的认证后，
会被分配一个user - system:serviceaccount:test:sa1，
和一个group - system:serviceaccounts:test:sa1，
同时也会被分配另一个group system:authenticated代表这是一个通过认证的请求

前面的user和group目前是没有关联任何role或者clusterrole的，
这意味着他们是没有任何权利去查看或者修改k8s内部资源的。
而system:authenticated是系统自动创建的group，
并且已经被默认关联到了下面的三个clusterrole，
他们是有查看资源的权利，但是很受限

system:public-info-viewer
system:discovery
system:basic-user
```

通过下面的clusterrolebinding可看到，上面的三个clusterrole确实绑定到group system:authenticated了

```bash
root@master:~# kubectl describe clusterrolebinding system:public-info-viewer
Name:         system:public-info-viewer
Labels:       kubernetes.io/bootstrapping=rbac-defaults
Annotations:  rbac.authorization.kubernetes.io/autoupdate: true
Role:
  Kind:  ClusterRole
  Name:  system:public-info-viewer
Subjects:
  Kind   Name                    Namespace
  ----   ----                    ---------
  Group  system:authenticated
  Group  system:unauthenticated

root@master:~# kubectl describe clusterrolebinding system:discovery
Name:         system:discovery
Labels:       kubernetes.io/bootstrapping=rbac-defaults
Annotations:  rbac.authorization.kubernetes.io/autoupdate: true
Role:
  Kind:  ClusterRole
  Name:  system:discovery
Subjects:
  Kind   Name                  Namespace
  ----   ----                  ---------
  Group  system:authenticated

root@master:~# kubectl describe clusterrolebinding system:basic-user
Name:         system:basic-user
Labels:       kubernetes.io/bootstrapping=rbac-defaults
Annotations:  rbac.authorization.kubernetes.io/autoupdate: true
Role:
  Kind:  ClusterRole
  Name:  system:basic-user
Subjects:
  Kind   Name                  Namespace
  ----   ----                  ---------
  Group  system:authenticated
```

通过下面的命令查看这三个clusterrole都有什么权利，可以看到权利是比较低的，只能查看Non-Resource URLs，不能查看pod，namespace，deployment等资源信息

```bash
root@master:~# kubectl describe clusterrole system:public-info-viewer
Name:         system:public-info-viewer
Labels:       kubernetes.io/bootstrapping=rbac-defaults
Annotations:  rbac.authorization.kubernetes.io/autoupdate: true
PolicyRule:
  Resources  Non-Resource URLs  Resource Names  Verbs
  ---------  -----------------  --------------  -----
             [/healthz]         []              [get]
             [/livez]           []              [get]
             [/readyz]          []              [get]
             [/version/]        []              [get]
             [/version]         []              [get]

root@master:~# kubectl describe clusterrole system:discovery
Name:         system:discovery
Labels:       kubernetes.io/bootstrapping=rbac-defaults
Annotations:  rbac.authorization.kubernetes.io/autoupdate: true
PolicyRule:
  Resources  Non-Resource URLs  Resource Names  Verbs
  ---------  -----------------  --------------  -----
             [/api/*]    []              [get]
             [/api]             []              [get]
             [/apis/*]          []              [get]
             [/apis]            []              [get]
             [/healthz]         []              [get]
             [/livez]           []              [get]
             [/openapi/*]       []              [get]
             [/openapi]         []              [get]
             [/readyz]          []              [get]
             [/version/]        []              [get]
             [/version]         []              [get]

root@master:~# kubectl describe clusterrole system:basic-user
Name:         system:basic-user
Labels:       kubernetes.io/bootstrapping=rbac-defaults
Annotations:  rbac.authorization.kubernetes.io/autoupdate: true
PolicyRule:
  Resources                                      Non-Resource URLs  Resource Names  Verbs
  ---------                                      -----------------  --------------  -----
  selfsubjectaccessreviews.authorization.k8s.io  []                 []              [create]
  selfsubjectrulesreviews.authorization.k8s.io   []                 []              [create]
```

尝试获取pod信息，但是被forbidden，因为没有被授权

```
root@master:~# curl --header "Authorization: Bearer $TOKEN" --insecure -s $APISERVER/api/v1/namespaces/test
{
  "kind": "Status",
  "apiVersion": "v1",
  "metadata": {

  },
  "status": "Failure",
  "message": "namespaces \"test\" is forbidden: User \"system:serviceaccount:test:sa1\" cannot get resource \"namespaces\" in API group \"\" in the namespace \"test\"",
  "reason": "Forbidden",
  "details": {
    "name": "test",
    "kind": "namespaces"
  },
  "code": 403
```

提高sa权利

如何提高sa的权利呢？
a. 修改默认的这三个clusterrole，但是这是公共的，不建议修改。
b. 将sa绑定的其他权利比较高的clusterrole，比如cluster-admin。
c. 新创建一个role或者clusterrole，指定好需要的权利，将sa绑定上即可。这是推荐的做法。

1。先在 sa-test 的namespace下创建一个 role。 read-pod-1。

这个role的权利只可以获取namespace sa-test下的pod

```bash
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: sa-test
  name: read-pod-1
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]
```

上面只是创建role，下面是rolebinding，是要具体绑定给谁

2.创建一个叫 sa-test的 rolebinding，给到 namespace sa-test下的serviceaccount sa1 用的role是上面创建的read-pod-1

```bash
kubectl create rolebinding sa-test  -n sa-test --role read-pod-1 --serviceaccount sa-test:sa1
```

验证

```bash
root@master:~# curl --header "Authorization: Bearer $TOKEN" --cacert /tmp/ca.crt -s $APISERVER/api/v1/namespaces/sa-test/pods/test
{
  "kind": "Pod",
  "apiVersion": "v1",
  "metadata": {
    "name": "test",
    "namespace": "sa-test",
    "selfLink": "/api/v1/namespaces/sa-test/pods/test",
    "uid": "12ef72cf-be59-4329-8e67-2f3c805a553f",
    "resourceVersion": "13801401",
    "creationTimestamp": "2020-08-22T22:50:22Z",
    "annotations": {
      "cni.projectcalico.org/podIP": "10.24.166.144/32",
      "cni.projectcalico.org/podIPs": "10.24.166.144/32",
      "k8s.v1.cni.cncf.io/network-status": "[{\n    \"name\": \"k8s-pod-network\",\n    \"ips\": [\n        \"10.24.166.144\"\n    ],\n    \"default\": true,\n    \"dns\": {}\n}]",
      "k8s.v1.cni.cncf.io/networks-status": "[{\n    \"name\": \"k8s-pod-network\",\n    \"ips\": [\n        \"10.24.166.144\"\n    ],\n    \"default\": true,\n    \"dns\": {}\n}]"
    }
  },
  ...
```

但是pod的子资源是不能获取的，比如获取pods/logs,因为role里只指定了pod资源。如果想获取子资源，还得单独指定